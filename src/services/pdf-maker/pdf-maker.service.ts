import { Injectable } from '@nestjs/common';
import axios from 'axios';
import { TDocumentDefinitions } from 'pdfmake/interfaces';
import PdfPrinter from 'pdfmake';

@Injectable()
export class PdfMakerService {
  private fonts = {
    Helvetica: {
      normal: 'Helvetica',
      bold: 'Helvetica-Bold',
      italics: 'Helvetica-Oblique',
      bolditalics: 'Helvetica-BoldOblique',
    },
  };

  private printer = new PdfPrinter(this.fonts);

  // Generate PDF in memory and return a Buffer
  private generatePDFBuffer(
    docDefinition: TDocumentDefinitions,
  ): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      try {
        const options = {};
        const pdfDoc = this.printer.createPdfKitDocument(
          docDefinition,
          options,
        );

        // Create a buffer to hold the PDF data
        const chunks: any[] = [];
        pdfDoc.on('data', (chunk) => {
          chunks.push(chunk);
        });

        pdfDoc.on('end', () => {
          const pdfBuffer = Buffer.concat(chunks);
          resolve(pdfBuffer);
        });

        pdfDoc.on('error', (err) => {
          reject(err);
        });

        pdfDoc.end();
      } catch (error) {
        reject(error);
      }
    });
  }

  private async getImageAsBase64(url: string): Promise<string> {
    try {
      const response = await axios.get(url, { responseType: 'arraybuffer' });
      const base64 = Buffer.from(response.data, 'binary').toString('base64');
      return `data:image/jpeg;base64,${base64}`;
    } catch (error) {
      console.error('Error fetching image:', error);
      throw new Error('Image download failed');
    }
  }

  async generateSamplePdf(): Promise<Buffer> {
    const imageUrl =
      'https://gratisography.com/wp-content/uploads/2024/11/gratisography-augmented-reality-1170x780.jpg';

    const imageBase64 = await this.getImageAsBase64(imageUrl);

    const docDefinition: TDocumentDefinitions = {
      content: [
        { text: 'Hello, World!', style: 'header' },
        {
          text: 'This is a sample PDF document generated by NestJS and pdfmake.',
        },
        { text: 'Enjoy creating dynamic PDFs with your NestJS backend!' },
        {
          image: imageBase64,
          width: 150,
          height: 150,
          alignment: 'center',
        },
      ],
      styles: {
        header: { fontSize: 18, bold: true, font: 'Helvetica' },
      },
      defaultStyle: {
        font: 'Helvetica',
      },
    };

    return await this.generatePDFBuffer(docDefinition);
  }

  // SAMPLE USAGE EXAMPLE - SEND TO CLIENT
  //  try {
  //     const pdfBuffer = await this.pdfMakerService.generateSamplePdf();
  //     res.set({
  //       'Content-Type': 'application/pdf',
  //       'Content-Disposition': 'attachment; filename="sample.pdf"',
  //       'Content-Length': pdfBuffer.length,
  //     });
  //     res.end(pdfBuffer);
  //   } catch (error) {
  //     res.status(500).send('Error generating PDF');
  //   }
}
